Problem statement
You are given a non-decreasing array 'arr' consisting of 'n' integers and an integer 'x'. You need to find the first and last position of 'x' in the array.

Note:
1. The array follows 0-based indexing, so you need to return 0-based indices.
2. If 'x' is not present in the array, return {-1 -1}.
3. If 'x' is only present once in the array, the first and last position of its occurrence will be the same.


Example:
Input:  arr = [1, 2, 4, 4, 5],  x = 4

Output: 2 3

----------------------------------------------------------------------------------------------------------------------------------------
CODE

vector<int> searchRange(vector<int> &arr, int x)
{
	int n = arr.size();
	vector<int>v(2);
	v[0] = -1;
	v[1] = -1;
	// First Occurence
	int low = 0;
	int high = n-1;
	while(low<=high){
		int mid = low + (high - low)/2;
		if(arr[mid]==x){
			if(mid==0){
				v[0] = mid;
				break;
			}
			else if(arr[mid-1]!=x){
				v[0] = mid;
				break;
			}
			else
				high = mid - 1;
		}
		else if(arr[mid]<x)
			low = mid + 1;
		else
			high = mid - 1;
	}
	// Last Occurence 
	low = 0;
	high = n-1;
	while(low<=high){
		int mid = low + (high - low)/2;
		if(arr[mid]==x){
			if(mid==n-1){
				v[1] = mid;
				break;
			}
			else if(arr[mid+1]!=x){
				v[1] = mid;
				break;
			}
			else
				low = mid + 1;

		}
		else if(arr[mid]<x)
			low = mid + 1;
		else	
			high = mid - 1;
	}
	return v;

}

